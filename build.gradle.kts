import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

val kashVersion = File("src/main/resources/version.txt").readText().trim()
val kashJarBase = "kash-shell"
val kashShellJar = "$kashJarBase-$kashVersion.jar"

allprojects {
    group = "com.beust.kash"
    version = kashVersion
    apply<MavenPublishPlugin>()
}

buildscript {
    val kotlinVer by extra { "1.3.60" }

    repositories {
        jcenter()
        mavenCentral()
        maven { setUrl("https://plugins.gradle.org/m2") }
    }

    dependencies {
        classpath(kotlin("gradle-plugin", kotlinVer))
        classpath("com.github.jengelman.gradle.plugins:shadow:5.2.0")
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

repositories {
    jcenter()
    mavenCentral()
    maven { setUrl("https://plugins.gradle.org/m2") }
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-eap") }
}

plugins {
    java
    "java-library"
    "maven-publish"
    application
    idea
    id("org.jetbrains.kotlin.jvm") version "1.3.60"
    id("com.github.johnrengelman.shadow") version "5.2.0"
    id("ca.coglinc.javacc") version "2.4.0"
    id("com.github.breadmoirai.github-release") version "2.2.9"
    id("com.jfrog.bintray") version "1.8.3" // Don't use 1.8.4, crash when publishing
    id("com.github.ben-manes.versions") version "0.27.0"
}

val kotlinVer by extra { "1.3.60" }

sourceSets {
    main {
        java.srcDir("build/generated/javacc")
    }
}

dependencies {
    listOf(
        "org.jline:jline:3.13.1",
        "org.fusesource:fuse-project:7.2.0.redhat-060",
        "org.slf4j:slf4j-api:2.0.0-alpha1",
        "ch.qos.logback:logback-classic:1.3.0-alpha5",
        "com.google.inject:guice:4.2.2",
        "me.sargunvohra.lib:CakeParse:1.0.7",
        "com.beust:jcommander:1.72",
        "org.apache.ivy:ivy:2.5.0"
    )
        .forEach { compile(it) }

    compile("com.beust:klaxon:5.2") {
        exclude("org.jetbrains.kotlin")
    }

    listOf(
        "compiler-embeddable", "scripting-compiler-embeddable", "scripting-common", "scripting-jvm",
        "scripting-jvm-host-embeddable", "main-kts"
    )
        .forEach { compile(kotlin(it, kotlinVer)) }

    listOf(
        "org.testng:testng:7.0.0",
        "org.assertj:assertj-core:3.14.0"
    )
        .forEach { testCompile(it) }
}

application {
    mainClassName = "com.beust.kash.MainKt"
}

val shadowJar = tasks {
    named<ShadowJar>("shadowJar") {
        archiveBaseName.set(kashJarBase)
        mergeServiceFiles()
    }
}

// Disable standard jar task to avoid building non-shadow jars
val jar by tasks.getting {
    enabled = false
}

// Update the scripts "run" and "kash" to use the correct jar file (which changes depending on the version number)
// This should only be run when the version number changes.
tasks.register("updateScripts") {
    listOf(
        "run" to "./gradlew shadowJar && java",
        "kash" to "java -Dorg.slf4j.simpleLogger.defaultLogLevel=info",
        "kash-debug" to "java -Droot-level=DEBUG"
    )
        .forEach { pair ->
            File(pair.first).apply {
                writeText(pair.second + " -jar build/libs/$kashShellJar\n")
            }
        }
}

tasks {
    withType<Assemble> {
        finalizedBy("updateScripts")
    }
}

//
// Github release. To create and upload the distribution to Github releases:
// ./gradlew all  // create the release zip file (build/distributions/kash-{version}.zip)
// ./gradlew upload // upload the release to github
//

githubRelease {
    // Defined in ~/.gradle/gradle.properties
    token(project.findProperty("githubToken")?.toString())
    owner("cbeust")
    repo("kash")
    overwrite(true)
    releaseAssets("$buildDir/distributions/kash-$kashVersion.zip")

// tagName("some tag")
// e.g. release notes
//    body("This is the body")
}

// These tasks are automatically generated by the application plug-in but they generate the wrong
// content, so disable them
listOf("distZip", "shadowDistZip").forEach { tasks[it].enabled = false }

distributions {
    // Create a task smallDistZip, which in turn will generate kash-small-{version}.zip. Then rename
    // that zip file to kash-{version}.zip.
    create("small") {
        contents {
            into("/")
            from("$buildDir/kashScripts") {
                include("*")
            }
            from("$buildDir/libs") {
                include("$kashShellJar")
            }
        }
    }
}

tasks.register<Jar>("apiJar") {
    from("$buildDir/classes/kotlin/main") {
        include("/com/beust/kash/api/*")
    }
}

tasks.register<Jar>("apiSrcJar") {
    archiveClassifier.set("sources")
    from("src/main/kotlin") {
        include("com/beust/kash/api/*")
    }
}

tasks["assemble"].finalizedBy("apiJar", "apiSrcJar")
tasks["smallDistZip"].dependsOn("createScript")

tasks.register("createScript") {
    doLast {
        File("$buildDir/kashScripts").apply {
            mkdirs()
            File(absolutePath, "kash").apply {
                writeText("java -jar $kashShellJar $*\n")
                setExecutable(true)
            }
        }
    }
}

tasks.register("all") {
    dependsOn("assemble")
    dependsOn("smallDistZip")
    dependsOn("apiJar")
    doLast {
        val file = "$buildDir/distributions/kash-$kashVersion.zip"
        File("$buildDir/distributions/kash-small-$kashVersion.zip")
            .renameTo(File(file))
        println("Created $file")
    }
}

// Upload to github releases
tasks.register("upload") {
    dependsOn("all")
    dependsOn("githubRelease")
}

//
// Bintray release.
//
bintray {
    user = project.findProperty("bintray.user")?.toString()
    key = project.findProperty("bintray.apikey")?.toString()
    dryRun = false
    publish = true

    setPublications("apiLibrary")

    with(pkg) {
        repo = "maven"
        name = "kash"
        with(version) {
            //            name = "1.14"
            desc = "Description of Kash"
            with(gpg) {
                sign = true
            }
        }
    }
}


configure<PublishingExtension> {
    publications {
        create<MavenPublication>("apiLibrary") {
            artifact(tasks["apiJar"])
            artifact(tasks["apiSrcJar"])
            pom {
                name.set("kash-api")
                description.set("The Kash public API")
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = "myRepo"
            url = uri("file://${buildDir}/repo")
        }
    }
}

